{"ast":null,"code":"import _defineProperty from \"/Users/sinker/Desktop/github/react_redux/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios'; // import user from './user'\n\nconst modules = {} // user\n\n/**\n * 初始化axios配置\n * @param  {Object} config 配置选项\n * @return undefined\n */\n;\n\nconst initAxios = config => {\n  // 默认配置\n  const defaultConfig = {\n    // base: 'http://campus.tianfugroupcd.com/campusLease:9010',\n    // base: 'http://c57f6ff3.ngrok.io',\n    base: \"http://192.168.50.42:9010\",\n    timeout: 30000,\n    withCredentials: true,\n    retry: 2,\n    retryDelay: 1000,\n    shouldRetry: () => true,\n    beforeRequest: config => config,\n    requestError: err => Promise.reject(err),\n    afterResponse: response => response,\n    responseError: err => Promise.reject(err)\n  };\n  config = _objectSpread({}, defaultConfig, {}, config);\n  axios.defaults.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n  axios.defaults.baseURL = config.base;\n  axios.defaults.timeout = config.timeout;\n  axios.withCredentials = config.withCredentials;\n  axios.defaults.retry = config.retry;\n  axios.defaults.retryDelay = config.retryDelay;\n  axios.defaults.shouldRetry = config.shouldRetry; // 添加请求拦截器\n\n  axios.interceptors.request.use(function (cfg) {\n    // 在发送请求之前做些什么\n    return config.beforeRequest(cfg);\n  }, function (err) {\n    // 对请求错误做些什么\n    return config.requestError(err);\n  }); // 添加响应拦截器\n\n  axios.interceptors.response.use(function (response) {\n    // 对响应数据做点什么\n    return config.afterResponse(response);\n  }, function (err) {\n    // 错误重试\n    let errConfig = err.config; // 设置重置次数，默认为0\n\n    errConfig.__retryCount = errConfig.__retryCount || 0; // 不需要重试的情况下直接进行错误处理\n\n    if (!errConfig || !errConfig.retry || typeof errConfig.shouldRetry !== 'function' && !errConfig.shouldRetry || typeof errConfig.shouldRetry === 'function' && !errConfig.shouldRetry(err) || errConfig.__retryCount >= errConfig.retry) {\n      config.responseError(err);\n      return;\n    } //重试次数自增\n\n\n    errConfig.__retryCount += 1; //延时处理\n\n    let backoff = new Promise(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, errConfig.retryDelay || 1);\n    }); //重新发起axios请求\n\n    return backoff.then(function () {\n      return axios(errConfig);\n    });\n  });\n}; // 方法聚合\n\n\nconst methods = {\n  // GET请求\n  get(opts) {\n    const params = opts.params || {};\n    const options = {\n      url: opts.url,\n      method: 'get',\n      responseType: opts.responseType || 'json',\n      params: params\n    };\n    return axios(options);\n  },\n\n  // POST请求\n  post(opts) {\n    const params = opts.params || {};\n    const options = {\n      url: opts.url,\n      method: 'post',\n      data: params // headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n\n    };\n    return axios(options);\n  },\n\n  // 上传\n  upload(opts) {\n    const params = opts.params || {};\n    let formData = new FormData();\n\n    for (let k in params) {\n      formData.append(k, params[k]);\n    }\n\n    const options = {\n      url: opts.url,\n      method: 'post',\n      data: formData,\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return axios(options);\n  },\n\n  // PUT请求\n  put(opts) {\n    const params = opts.params || {};\n    const options = {\n      url: opts.url,\n      method: 'put',\n      data: JSON.stringify(params)\n    };\n    return axios(options);\n  },\n\n  // DELETE请求\n  delete(opts) {\n    const params = opts.params || {};\n    const options = {\n      url: opts.url,\n      method: 'delete',\n      data: JSON.stringify(params)\n    };\n    return axios(options);\n  }\n\n};\n/**\n * 执行请求\n * @param options 请求参数对象\n */\n\nconst excute = options => {\n  // 方法验证\n  if (methods[options.method] === undefined) {\n    console.error('请求' + options.title + '的方法不正确！');\n    return;\n  }\n\n  const method = methods[options.method]; // 返回可以cancel的axios实例\n\n  return method(options);\n};\n/**\n * 根据模块创建api\n * @param {object} modules 模块\n * @param {object} config 配置\n */\n\n\nconst createAPI = (modules, config) => {\n  initAxios(config);\n  let apiModules = {};\n\n  for (let module in modules) {\n    let apiModule = {};\n    modules[module].forEach(item => {\n      apiModule[item.name] = params => {\n        item.params = params;\n        return excute(item);\n      };\n    });\n    apiModules[module] = apiModule;\n  }\n\n  return apiModules;\n};\n\nconst config = {\n  beforeRequest: config => {\n    config.headers = config.headers || {};\n    config.headers['UUID_TOKEN'] = localStorage.getItem('token') || '';\n    return config;\n  },\n  afterResponse: response => {\n    return response.data;\n  }\n};\nconst ajax = createAPI(modules, config);\nexport default ajax;","map":{"version":3,"sources":["/Users/sinker/Desktop/github/react_redux/src/api/index.js"],"names":["axios","modules","initAxios","config","defaultConfig","base","timeout","withCredentials","retry","retryDelay","shouldRetry","beforeRequest","requestError","err","Promise","reject","afterResponse","response","responseError","defaults","headers","baseURL","interceptors","request","use","cfg","errConfig","__retryCount","backoff","resolve","setTimeout","then","methods","get","opts","params","options","url","method","responseType","post","data","upload","formData","FormData","k","append","put","JSON","stringify","delete","excute","undefined","console","error","title","createAPI","apiModules","module","apiModule","forEach","item","name","localStorage","getItem","ajax"],"mappings":"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","sourcesContent":["import axios from 'axios'\n// import user from './user'\n\nconst modules = {\n  // user\n}\n\n/**\n * 初始化axios配置\n * @param  {Object} config 配置选项\n * @return undefined\n */\nconst initAxios = (config) => {\n  // 默认配置\n  const defaultConfig = {\n    // base: 'http://campus.tianfugroupcd.com/campusLease:9010',\n    // base: 'http://c57f6ff3.ngrok.io',\n    base: \"http://192.168.50.42:9010\",\n    timeout: 30000,\n    withCredentials: true,\n    retry: 2,\n    retryDelay: 1000,\n    shouldRetry: () => true,\n    beforeRequest: config => config,\n    requestError: err => Promise.reject(err),\n    afterResponse: response => response,\n    responseError: err => Promise.reject(err)\n  }\n  config = { ...defaultConfig, ...config }\n  axios.defaults.headers['Content-Type'] = 'application/x-www-form-urlencoded'\n  axios.defaults.baseURL = config.base\n  axios.defaults.timeout = config.timeout\n  axios.withCredentials = config.withCredentials\n  axios.defaults.retry = config.retry\n  axios.defaults.retryDelay = config.retryDelay\n  axios.defaults.shouldRetry = config.shouldRetry\n\n  // 添加请求拦截器\n  axios.interceptors.request.use(function (cfg) {\n    // 在发送请求之前做些什么\n    return config.beforeRequest(cfg)\n  }, function (err) {\n    // 对请求错误做些什么\n    return config.requestError(err)\n  })\n  // 添加响应拦截器\n  axios.interceptors.response.use(function (response) {\n    // 对响应数据做点什么\n    return config.afterResponse(response)\n  }, function (err) {\n    // 错误重试\n    let errConfig = err.config\n    // 设置重置次数，默认为0\n    errConfig.__retryCount = errConfig.__retryCount || 0\n    // 不需要重试的情况下直接进行错误处理\n    if ((!errConfig || !errConfig.retry) ||\n      (typeof errConfig.shouldRetry !== 'function' && !errConfig.shouldRetry) ||\n      (typeof errConfig.shouldRetry === 'function' && !errConfig.shouldRetry(err)) ||\n      (errConfig.__retryCount >= errConfig.retry)\n    ) {\n      config.responseError(err)\n      return\n    }\n    //重试次数自增\n      errConfig.__retryCount += 1\n    //延时处理\n    let backoff = new Promise(resolve => {\n      setTimeout(() => {\n        resolve()\n      }, errConfig.retryDelay || 1)\n    })\n    //重新发起axios请求\n    return backoff.then(function() {\n      return axios(errConfig)\n    })\n  })\n}\n\n// 方法聚合\nconst methods = {\n  // GET请求\n  get (opts) {\n    const params = opts.params || {}\n    const options = {\n      url: opts.url,\n      method: 'get',\n      responseType: opts.responseType || 'json',\n      params: params\n    }\n    return axios(options)\n  },\n\n  // POST请求\n  post (opts) {\n    const params = opts.params || {}\n    const options = {\n      url: opts.url,\n      method: 'post',\n      data: params\n      // headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n    }\n    return axios(options)\n  },\n\n  // 上传\n  upload (opts) {\n    const params = opts.params || {}\n    let formData = new FormData()\n    for (let k in params) {\n      formData.append(k, params[k])\n    }\n    const options = {\n      url: opts.url,\n      method: 'post',\n      data: formData,\n      headers: { 'Content-Type': 'multipart/form-data' }\n    }\n    return axios(options)\n  },\n\n  // PUT请求\n  put (opts) {\n    const params = opts.params || {}\n    const options = {\n      url: opts.url,\n      method: 'put',\n      data: JSON.stringify(params)\n    }\n    return axios(options)\n  },\n\n  // DELETE请求\n  delete (opts) {\n    const params = opts.params || {}\n    const options = {\n      url: opts.url,\n      method: 'delete',\n      data: JSON.stringify(params)\n    }\n    return axios(options)\n  }\n\n}\n\n/**\n * 执行请求\n * @param options 请求参数对象\n */\nconst excute = (options) => {\n  // 方法验证\n  if (methods[options.method] === undefined) {\n    console.error('请求' + options.title + '的方法不正确！')\n    return\n  }\n  const method = methods[options.method]\n  // 返回可以cancel的axios实例\n  return method(options)\n}\n\n/**\n * 根据模块创建api\n * @param {object} modules 模块\n * @param {object} config 配置\n */\nconst createAPI = (modules, config) => {\n  initAxios(config)\n  let apiModules = {}\n  for (let module in modules) {\n    let apiModule = {}\n    modules[module].forEach(item => {\n      apiModule[item.name] = (params) => {\n        item.params = params\n        return excute(item)\n      }\n    })\n    apiModules[module] = apiModule\n  }\n  return apiModules\n}\n\nconst config = {\n  beforeRequest: config => {\n    config.headers = config.headers || {}\n    config.headers['UUID_TOKEN'] = localStorage.getItem('token') || ''\n    return config\n  },\n  afterResponse: (response) => {\n    return response.data\n  }\n}\n\nconst ajax = createAPI(modules, config)\n\nexport default ajax\n"]},"metadata":{},"sourceType":"module"}